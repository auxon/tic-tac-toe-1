{"version":3,"sources":["web3/sensiletwallet.ts","web3/wallet.ts","Square.js","Board.js","web3/web3.ts","storage.js","Game.js","TitleBar.js","balance.js","auth.js","App.js","reportWebVitals.js","index.js","web3/whatsonchain.ts"],"names":["SensiletWallet","network","NetWork","Mainnet","sensilet","window","console","log","DEBUG_TAG","warn","name","permissions","this","requestAccount","alert","open","a","isConnect","isConnected","error","getBsvBalance","res","balance","Promise","resolve","total","rawtx","script","satoshis","inputIndex","sigHashType","tx","bsv","Transaction","signTx","list","txHex","address","getAddressFromP2PKH","scriptHex","sigtype","unlockScript","Script","add","Buffer","from","sigList","sig","publicKey","inputs","setScript","toString","signature","publickey","rawTx","Whatsonchain","sendRawTransaction","minAmount","options","getAddress","listUnspent","then","data","filter","utxo","value","map","txId","tx_hash","outputIndex","tx_pos","buildPublicKeyHashOut","toHex","getPublicKey","wallet","pubKeyHash","fromHex","toASM","split","Address","SignType","Square","props","icon","className","n","winnerClass","onClick","href","target","title","label","Board","row","col","board","cellCounter","i","columns","j","push","renderSquare","winnerSquares","squares","createBoard","React","Component","web3","url","axios","get","timeout","contractClass","buildContractClass","types","buildTypeClasses","getRawChangeAddress","contract","amountInContract","changeAddress","purpose","utxos","addOutput","Output","lockingScript","change","signRawTransaction","ALL","sendRawTx","contractUtxo","cbBuildTx","addInput","Input","prevTxId","output","Player","PlayerPrivkey","player","localStorage","getItem","key","setItem","PlayerPublicKey","privateKey","PrivateKey","fromWIF","PublicKey","fromPrivateKey","PlayerAddress","toAddress","CurrentPlayer","GameData","gameStr","JSON","parse","set","game","stringify","update","now","Object","assign","clear","ContractUtxos","id","outputs","utxosStr","getlast","length","getdeploy","calculateWinner","lines","b","c","winner","winnerRow","getLocation","move","0","1","2","3","4","5","6","7","8","initialState","history","Array","fill","currentStepNumber","isAliceTurn","toContractState","state","slice","square","Game","keys","attachState","setState","states","contractInstance","current","canMove","backupState","gameState","concat","currentLocation","stepNumber","call","setOutput","getEstimateFee","newStates","newLockingScript","getNewStateScript","amount","setInputScript","preimage","getPreimage","Error","toScript","seal","catch","e","status","end","bet","deploy","last","src","winnerName","nexter","handleClick","TitleBar","amountRef","useRef","onStart","parseInt","isNaN","getbalance","started","onCancel","ref","type","min","defaultValue","placeholder","Balance","useState","setBalance","useEffect","Auth","sensiletLogin","location","reload","fetchContract","alicePubKey","bobPubKey","loadContract","TictactoeContractClass","PubKey","App","createRef","instance","updateStates","timer","setTimeout","setWallet","clearTimeout","startGame","gameStates","date","Date","cancelGame","clean","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","aliceKey","fromRandom","toWIF","bobKey","initPlayer","ReactDOM","render","StrictMode","document","getElementById","size","Math","max","time","post","API_PREFIX","txhex"],"mappings":"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","file":"static/js/main.dd19a029.chunk.js","sourcesContent":["import { NetWork, UTXO, wallet, SignType } from './wallet';\nimport { bsv } from 'scryptlib/dist';\nimport Whatsonchain from './whatsonchain';\n\n\nexport class SensiletWallet extends wallet {\n  static DEBUG_TAG = 'Sensilet';\n  sensilet: any;\n\n  constructor(network: NetWork = NetWork.Mainnet) {\n    super(network);\n    if (typeof (window as any).sensilet !== 'undefined') {\n      console.log(SensiletWallet.DEBUG_TAG, 'Sensilet is installed!');\n      this.sensilet = (window as any).sensilet \n    } else {\n      console.warn(SensiletWallet.DEBUG_TAG, \"sensilet is not installed\");\n    }\n  }\n\n  requestAccount(name: string, permissions: string[]): Promise<any> {\n\n    if(!this.sensilet) {\n      if(typeof (window as any).sensilet === 'undefined') {\n        alert(\"sensilet is not installed\");\n         window.open(\"https://sensilet.com/\", '_blank');\n      } else  {\n        console.log(SensiletWallet.DEBUG_TAG, 'Sensilet is installed!');\n        this.sensilet = (window as any).sensilet \n        return this.sensilet.requestAccount()\n      }\n    }\n\n    return this.sensilet.requestAccount()\n  }\n\n  async isConnected(): Promise<boolean> {\n    try {\n      console.log(SensiletWallet.DEBUG_TAG, 'isConnect')\n      if (typeof this.sensilet !== 'undefined') {\n        let isConnected = await this.sensilet.isConnect();\n        console.log(SensiletWallet.DEBUG_TAG, 'connect state', isConnected);\n        return isConnected;\n      } \n\n    } catch (error) {\n      console.error('isConnected error', error)\n    }\n    return false;\n  }\n\n\n  async getbalance(): Promise<number> {\n    try {\n      let res = await this.sensilet.getBsvBalance();\n      console.log(SensiletWallet.DEBUG_TAG, 'getbalance', res.balance)\n      return Promise.resolve(res.balance.total);\n    } catch (error) {\n      console.error('getbalance error', error);\n    }\n\n    return Promise.resolve(0)\n  }\n\n  async signRawTransaction(rawtx: string,\n    script: string, \n    satoshis: number, \n    inputIndex: number, \n    sigHashType: SignType\n  ): Promise<string> {\n\n    const tx = new bsv.Transaction(rawtx);\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: getAddressFromP2PKH(script),\n          scriptHex: script,\n          inputIndex: inputIndex,\n          satoshis: satoshis,\n          sigtype: sigHashType\n        }\n      ]\n    });\n\n    const unlockScript = new bsv.Script()\n    .add(Buffer.from(res.sigList[0].sig,'hex'))\n    .add(Buffer.from(res.sigList[0].publicKey,'hex'));\n\n    tx.inputs[inputIndex].setScript(unlockScript);\n\n    return tx.toString();\n  }\n\n\n\n  async getSignature(rawtx: string,\n    script: string, \n    satoshis: number,\n    inputIndex: number, \n    sigHashType: SignType,\n    address: string\n  ): Promise<{\n    signature: string,\n    publickey: string\n  }> {\n\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: address,\n          inputIndex:inputIndex,\n          satoshis:satoshis,\n          scriptHex: script,\n          sigtype: sigHashType\n        }\n      ]\n    });\n\n    return {\n      signature: res.sigList[0].sig,\n      publickey:  res.sigList[0].publickey,\n    }\n\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n    return Whatsonchain.sendRawTransaction(rawTx);\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n\n    let address = await this.sensilet.getAddress();\n    console.log(SensiletWallet.DEBUG_TAG, 'listUnspent', address)\n    return Whatsonchain.listUnspent(address).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txId: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(address).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  async getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getAddress();\n  }\n\n\n  async getPublicKey(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getPublicKey();\n  }\n}\n\nfunction getAddressFromP2PKH(script: string) : string {\n  const asm = bsv.Script.fromHex(script).toASM();\n  //OP_DUP OP_HASH160 ${address} OP_EQUALVERIFY OP_CHECKSIG\n  const pubKeyHash = asm.split(' ')[2]; //get address from script\n  const address = new bsv.Address.fromHex(`00${pubKeyHash}`).toString();\n  return address\n}","\nexport interface UTXO {\n  txId: number,\n  outputIndex: string;\n  satoshis: number;\n  script: string;\n  address?: string;\n  pubkey?: string\n}\n\n\nexport interface Account {\n  name: string,\n  paymail: string,\n  address: string,\n  permissions?: string[]\n}\n\n\nexport enum NetWork {\n  Testnet = 'testnet',\n  Regtest = 'regtest',\n  Mainnet = 'mainnet',\n  STN = 'STN'\n}\n\n\nexport enum SignType {\n  ALL = 0x00000001 | 0x00000040,\n  SINGLE = 0x00000003 | 0x00000040,\n  NONE = 0x00000002 | 0x00000040,\n  ANYONECANPAY_ALL = 0x00000001 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_SINGLE = 0x00000003 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_NONE = 0x00000002 | 0x00000040 | 0x00000080\n}\n\n\nexport abstract class wallet {\n\n  network: NetWork;\n\n  constructor(network: NetWork) {\n    this.network = network;\n  }\n\n  // Check if the wallet is ready. If not ready, use requestAccount to setup.\n  abstract isConnected(): Promise<boolean>;\n\n  //Dapp use this api to connect to the wallet.\n  abstract requestAccount(name: string, permissions: string[]): Promise<any>;\n\n  //get wallet balance\n  abstract getbalance(): Promise<number>;\n\n  //sign raw transaction, returns unlockscript of the p2pkh input if success\n  abstract signRawTransaction(rawtx: string, script: string, satoshis: number, inputIndex: number, sigHashType: SignType\n  ): Promise<string>;\n\n  //get signature for special input\n  abstract getSignature(rawtx: string, script: string, satoshis: number, inputIndex: number, sigHashType: SignType, address: string\n  ): Promise<{\n    signature: string,\n    publickey: string\n  }>;\n\n  //send raw transaction, returns transaction hash if success\n  abstract sendRawTransaction(rawTx: string): Promise<string>;\n\n  //returns array of unspent transaction outputs, which total amount is more than the minAmount argument.\n  abstract listUnspent(minAmount: number, options?: {\n    purpose?: string\n  }): Promise<UTXO[]>;\n\n  //returns a new Bitcoin address, for receiving change.\n  abstract getRawChangeAddress(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns a public key\n  abstract getPublicKey(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n}","import React from 'react';\n\nconst Square = props => {\n\n\n\n  let tx = props.value ? `https://whatsonchain.com/tx/${props.value.tx}` : \"\";\n  let icon = props.value ? <div className='squareicon'>{props.value.n}</div> : \"\";\n  return (\n    <div className=\"squarewapper\">\n      <button className={`${props.winnerClass} square`} onClick={props.onClick}>\n        {props.value ? <a href={tx} target=\"_blank\" title=\"Click to see the transaction\">{props.value.label}</a> : props.value}\n      </button>\n      {icon}\n    </div>\n\n  )\n\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  createBoard(row, col) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      for (let j = 0; j < col; j += 1) {\n        columns.push(this.renderSquare(cellCounter++));\n      }\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n\n    const winnerClass =\n      this.props.winnerSquares &&\n        (this.props.winnerSquares[0] === i ||\n          this.props.winnerSquares[1] === i ||\n          this.props.winnerSquares[2] === i)\n        ? 'square--green'\n        : '';\n\n    return (\n      <Square\n        winnerClass={winnerClass}\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(3, 3)}</div>;\n  }\n}\n\nexport default Board;\n","import { buildContractClass, buildTypeClasses, ScryptType, bsv } from 'scryptlib';\nimport { UTXO, wallet, SignType } from './wallet';\nimport axios from 'axios';\nimport { AbstractContract } from 'scryptlib/dist/contract';\nconst WEB3_VERSION = '0.0.2';\n\n\nexport class web3 {\n\n  static wallet: wallet;\n\n  static setWallet(wallet: wallet) {\n    web3.wallet = wallet;\n  }\n\n\n  static version() {\n    return WEB3_VERSION;\n  }\n\n\n  static loadContract(url: string): Promise<{\n    contractClass: typeof AbstractContract,\n    types: Record<string, typeof ScryptType>\n  }> {\n    return axios.get(url, {\n      timeout: 10000\n    }).then(res => {\n      const contractClass = buildContractClass(res.data);\n      return {\n        contractClass: contractClass,\n        types: buildTypeClasses(contractClass)\n      };\n    });\n  }\n\n\n  static async getChangeAddress(): Promise<string> {\n    return web3.wallet.getRawChangeAddress();\n  }\n\n\n  static async sendRawTx(rawTx: string): Promise<string> {\n    return web3.wallet.sendRawTransaction(rawTx);\n  }\n\n\n  static async deploy(contract: AbstractContract, amountInContract: number): Promise<string> {\n    const wallet = web3.wallet\n\n    const changeAddress = await web3.wallet.getRawChangeAddress();\n\n    return wallet.listUnspent(amountInContract, {\n      purpose: 'tic-tac-toe'\n    }).then((utxos: UTXO[]) => {\n      const tx = new bsv.Transaction();\n      tx.from([utxos[0]])\n        .addOutput(new bsv.Transaction.Output({\n          script: contract.lockingScript,\n          satoshis: amountInContract,\n        }))\n        .change(changeAddress);\n\n      return wallet.signRawTransaction(tx.toString(), utxos[0].script, utxos[0].satoshis, 0, SignType.ALL);\n    }).then(async (rawTx: string) => {\n      await web3.sendRawTx(rawTx);\n      return rawTx;\n    })\n  }\n\n  static async call(contractUtxo: UTXO,\n    cbBuildTx: (tx: bsv.Transaction) => void,\n  ): Promise<string> {\n    const wallet = web3.wallet\n    const tx = new bsv.Transaction();\n    tx.addInput(new bsv.Transaction.Input({\n      prevTxId: contractUtxo.txId,\n      outputIndex: contractUtxo.outputIndex,\n      script: new bsv.Script(), // placeholder\n      output: new bsv.Transaction.Output({\n        script: contractUtxo.script,\n        satoshis: contractUtxo.satoshis,\n      })\n    }))\n\n    cbBuildTx(tx);\n\n    const rawTx = tx.toString();\n    await web3.sendRawTx(rawTx);\n    return rawTx;\n  }\n}","import { PubKey, toHex, bsv } from \"scryptlib\";\n\n\nexport const Player = {\n  Alice: 'alice',\n  Bob: 'bob'\n};\n\n// store alice and bob's Privkey\nexport const PlayerPrivkey = {\n  get: (player) => {\n    return localStorage.getItem(player);\n  },\n  set: (player, key) => {\n    localStorage.setItem(player, key);\n  },\n};\n\n// store alice and bob's PublicKey, readonly\nexport const PlayerPublicKey = {\n  get: (player) => {\n    const key = PlayerPrivkey.get(player);\n    const privateKey = new bsv.PrivateKey.fromWIF(key);\n    const publicKey = bsv.PublicKey.fromPrivateKey(privateKey);\n    return toHex(publicKey);\n  }\n};\n\n// store alice and bob's PublicKey Address, readonly\nexport const PlayerAddress = {\n  get: (player) => {\n    const key = PlayerPrivkey.get(player);\n    const privateKey = new bsv.PrivateKey.fromWIF(key);\n    return privateKey.toAddress().toString();\n  }\n};\n\n// store current player\nexport const CurrentPlayer = {\n  get: () => {\n    return localStorage[`player`] || Player.Alice;\n  },\n  set: (player) => {\n    localStorage.setItem(`player`, player);\n  },\n};\n\n// Randomly generated alice and bob privateKey\nexport const initPlayer = () => {\n\n  const alice = PlayerPrivkey.get(Player.Alice);\n\n  if(!alice) {\n    const aliceKey = new bsv.PrivateKey.fromRandom();\n    PlayerPrivkey.set(Player.Alice, aliceKey.toWIF())\n  }\n\n  const bob = PlayerPrivkey.get(Player.Bob);\n\n  if(!bob) {\n    const bobKey = new bsv.PrivateKey.fromRandom();\n    PlayerPrivkey.set(Player.Bob, bobKey.toWIF())\n  }\n}\n\n// store game data\nexport const GameData = {\n  get: () => {\n    const gameStr = localStorage[`game`];\n    return gameStr ? JSON.parse(gameStr) : {};\n  },\n  set: (game) => {\n    localStorage.setItem(`game`, JSON.stringify(game));\n  },\n  update: (game) => {\n    const now = GameData.get();\n    localStorage.setItem(`game`, JSON.stringify(Object.assign(now, game)));\n  },\n  clear: () => {\n    localStorage.setItem(`game`, JSON.stringify({}));\n  },\n};\n\n\n// store all utxos related to the contract\nexport const ContractUtxos = {\n  add: (rawTx, outputIndex = 0) => {\n    const tx = new bsv.Transaction(rawTx);\n    const utxos = ContractUtxos.get();\n    const utxo = {\n      utxo: {\n        txId: tx.id,\n        outputIndex: outputIndex,\n        satoshis: tx.outputs[outputIndex].satoshis,\n        script: tx.outputs[outputIndex].script.toHex()\n      },\n      rawTx: rawTx\n    };\n    utxos.push(utxo)\n    ContractUtxos.set(utxos)\n\n    return utxo;\n  },\n  get: () => {\n    const utxosStr = localStorage[`utxos`];\n    return utxosStr ? JSON.parse(utxosStr) : [];\n  },\n  set: (utxos) => {\n    localStorage.setItem(`utxos`, JSON.stringify(utxos));\n  },\n  clear: () => {\n    localStorage.setItem(`utxos`, JSON.stringify([]));\n  },\n  getlast: () => {\n    const utxos = ContractUtxos.get();\n    return utxos[utxos.length - 1];\n  },\n\n  getdeploy: () => {\n    const utxos = ContractUtxos.get();\n    return utxos[0];\n  },\n};\n\n","import React from 'react';\nimport Board from './Board';\nimport { bsv, getPreimage, signTx } from 'scryptlib';\nimport { web3 } from './web3';\n\n\nimport { GameData, PlayerAddress, PlayerPrivkey, Player, CurrentPlayer, ContractUtxos } from './storage';\n\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[b] && squares[c] && squares[a].label === squares[b].label && squares[a].label === squares[c].label) {\n      return { winner: squares[a], winnerRow: lines[i] };\n    }\n  }\n\n  return { winner: null, winnerRow: null };\n};\n\nconst getLocation = (move) => {\n  const locationMap = {\n    0: 'row: 1, col: 1',\n    1: 'row: 1, col: 2',\n    2: 'row: 1, col: 3',\n    3: 'row: 2, col: 1',\n    4: 'row: 2, col: 2',\n    5: 'row: 2, col: 3',\n    6: 'row: 3, col: 1',\n    7: 'row: 3, col: 2',\n    8: 'row: 3, col: 3',\n  };\n\n  return locationMap[move];\n};\n\nconst initialState = {\n  history: [\n    {\n      squares: Array(9).fill(null),\n    },\n  ],\n  currentStepNumber: 0,\n  isAliceTurn: true,\n};\n\nconst toContractState = (state) => {\n  const history = state.history.slice(0, state.currentStepNumber + 1);\n  const current = history[history.length - 1];\n  const squares = current.squares.slice();\n  // n = 0 is first call\n  if (state.currentStepNumber > 0) {\n    return {\n      isAliceTurn: state.isAliceTurn,\n      board: squares.map(square => {\n        if (square && square.label === 'X') {\n          return 1;\n        } else if (square && square.label === 'O') {\n          return 2\n        } else {\n          return 0;\n        }\n      })\n    }\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    const game = GameData.get();\n    if (Object.keys(game).length !== 0) {\n      this.state = game;\n    } else {\n      this.state = initialState;\n    }\n\n    this.attachState();\n  }\n\n  clean(){\n    this.setState(initialState);\n  }\n\n\n  canMove(isAliceTurn, i, squares) {\n    const game = GameData.get();\n    if (!game || Object.keys(game).length === 0) {\n      alert(`Please start game first.`)\n      return false;\n    }\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return false;\n    }\n\n    let player = CurrentPlayer.get();\n\n    if (player === Player.Alice && isAliceTurn) {\n      return true;\n    } else if (player === Player.Bob && !this.state.isAliceTurn) {\n      return true;\n    } else {\n      alert(`now is ${this.state.isAliceTurn ? 'Alice' : 'Bob'} turn `)\n      return false;\n    }\n  }\n\n\n  attachState() {\n    const states = toContractState(this.state);\n    if (states && this.props.contractInstance) {\n      this.props.contractInstance.isAliceTurn = states.isAliceTurn;\n      this.props.contractInstance.board = states.board;\n    }\n  }\n\n  async handleClick(i) {\n\n    const history = this.state.history.slice(0, this.state.currentStepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n\n    if (!this.canMove(this.state.isAliceTurn, i, squares)) {\n      console.error('can not move now!')\n      return;\n    }\n\n    const backupState = Object.assign({}, this.state);\n\n    squares[i] = { label: this.state.isAliceTurn ? 'X' : 'O' };\n    const gameState = {\n      history: history.concat([\n        {\n          squares,\n          currentLocation: getLocation(i),\n          stepNumber: history.length,\n        },\n      ]),\n      isAliceTurn: !this.state.isAliceTurn,\n      currentStepNumber: history.length,\n    }\n\n    // update states\n    this.setState(gameState)\n\n    const contractUtxo = ContractUtxos.getlast().utxo;\n\n    let winner = calculateWinner(squares).winner;\n\n    web3.call(contractUtxo, (tx) => {\n\n      if (winner) { // Current Player won\n        let address = PlayerAddress.get(CurrentPlayer.get());\n\n        tx.setOutput(0, (tx) => {\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(address),\n            satoshis: contractUtxo.satoshis - tx.getEstimateFee(),\n          })\n        })\n\n      } else if (history.length >= 9) { //board is full\n\n        tx.setOutput(0, (tx) => {\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(PlayerAddress.get(Player.Alice)),\n            satoshis: (contractUtxo.satoshis - tx.getEstimateFee()) /2,\n          })\n        })\n        .setOutput(1, (tx) => {\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(PlayerAddress.get(Player.Bob)),\n            satoshis: (contractUtxo.satoshis - tx.getEstimateFee()) /2,\n          })\n        })\n\n      } else { //continue move\n\n        const newStates = toContractState(gameState);\n        const newLockingScript = this.props.contractInstance.getNewStateScript(newStates);\n        tx.setOutput(0, (tx) => {\n          const amount = contractUtxo.satoshis - tx.getEstimateFee();\n          return new bsv.Transaction.Output({\n            script: newLockingScript,\n            satoshis: amount,\n          })\n        })\n      }\n\n      tx.setInputScript(0, (tx, output) => {\n          const preimage = getPreimage(tx, output.script, output.satoshis)\n          const privateKey = new bsv.PrivateKey.fromWIF(PlayerPrivkey.get(CurrentPlayer.get()));\n          const sig = signTx(tx, privateKey, output.script, output.satoshis)\n\n          const amount = contractUtxo.satoshis - tx.getEstimateFee();\n          \n          if(amount < 1) {\n            alert('Not enough funds.');\n            throw new Error('Not enough funds.')\n          }\n\n          // we can verify locally before we broadcast the tx, if fail, \n          // it will print the launch.json in the brower webview developer tool, just copy/paste,\n          // and try launch the sCrypt debugger\n          // const result = this.props.contractInstance.move(i, sig, amount, preimage).verify({\n          //   inputSatoshis: output.satoshis, tx\n          // })\n\n          return this.props.contractInstance.move(i, sig, amount, preimage).toScript();\n        })\n        .seal()\n\n\n    }).then(rawTx => {\n\n      const utxo = ContractUtxos.add(rawTx);\n\n      squares[i].tx = utxo.utxo.txId;\n      squares[i].n = history.length;\n\n      if(!winner) {\n        CurrentPlayer.set(this.state.isAliceTurn ? Player.Alice : Player.Bob);\n      }\n\n\n      // update states\n      const gameState = Object.assign({}, this.state, {\n        history: history.concat([\n          {\n            squares,\n            currentLocation: getLocation(i),\n            stepNumber: history.length,\n          },\n        ])\n      })\n      this.setState(gameState)\n      GameData.update(gameState)\n      this.attachState();\n    })\n    .catch(e => {\n      //restore prev states\n      this.setState(backupState)\n\n      console.error('call contract fail', e)\n    })\n\n\n\n  }\n\n\n  render() {\n    const { history } = this.state;\n    const current = history[this.state.currentStepNumber];\n    const { winner, winnerRow } = calculateWinner(current.squares);\n\n    const deploy = ContractUtxos.getdeploy();\n\n    const last = ContractUtxos.getlast();\n\n\n    let status;\n    let end;\n\n    let icon;\n\n\n    if (CurrentPlayer.get() === Player.Bob) {\n      icon = <div className=\"bob\">Bob<img src=\"/tic-tac-toe/bob.png\"></img></div>\n    } else {\n      icon = <div className=\"alice\">Alice<img src=\"/tic-tac-toe/alice.jpg\"></img></div>\n    }\n\n    let bet;\n    if (deploy) {\n      bet = <div className=\"bet\"><a href={`https://whatsonchain.com/tx/${deploy.utxo.txId}`} target=\"_blank\">Deploy transaction</a> </div>\n    }\n\n    if (winner) {\n      let winnerName = winner.label === 'X' ? 'Alice' : 'Bob';\n      status = `Winner is ${winnerName}`;\n      if (last) {\n        end = <div className=\"end\"><a href={`https://whatsonchain.com/tx/${last.utxo.txId}`} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else if (history.length === 10) {\n      status = 'Draw. No one won.';\n      if (last) {\n        end = <div className=\"end\"><a href={`https://whatsonchain.com/tx/${last.utxo.txId}`} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else {\n\n      let nexter = this.state.isAliceTurn ? 'Alice' : 'Bob';\n\n      status = `Next player: ${nexter}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n\n          <div className=\"game-title\">\n            {icon}\n            <div className=\"game-status\"> {status} </div>\n          </div>\n\n          <Board\n            squares={current.squares}\n            winnerSquares={winnerRow}\n            onClick={i => this.handleClick(i)}\n          />\n\n          <div className=\"game-bottom\">\n            {bet}\n            {end}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","\nimport React, { useState, useRef, useEffect } from 'react';\n\nimport { web3 } from './web3';\n\n\nfunction TitleBar(props) {\n\n    const amountRef = useRef(null);\n\n    const onStart = async (e) => {\n\n        if (!web3.wallet) {\n            alert(\"Pelease create wallet first\")\n            return;\n        }\n        let amount = parseInt(amountRef.current.value);\n\n        if (amount < 50000) {\n            alert(\"invalid amount, at least 50000 satoshis\")\n            return;\n        }\n\n        if (!isNaN(amount)) {\n\n            let balance = await web3.wallet.getbalance();\n        \n            if (amount > balance) {\n                alert(\"Not enough funds. Please fund your wallet address first\");\n                return;\n            }\n\n            props.onStart(amount);\n        } else {\n            console.error(`${amountRef.current.value} is not number`)\n        }\n    }\n\n    const onCancel = (e) => {\n        props.onCancel();\n    }\n\n\n    if (props.started) {\n        return (\n            <div>\n                The game is in progress ...\n                <button className=\"pure-button cancel\" onClick={onCancel}>Restart</button>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <label>Bet amount:\n                    <input ref={amountRef} type=\"number\" name=\"amount\" min=\"1\" defaultValue={50000} placeholder=\"in satoshis\" />\n                </label>\n                <button className=\"start\" onClick={onStart}>Start</button>\n            </div>\n        );\n    }\n}\n\nexport default TitleBar;\n","import { useState, useEffect } from \"react\";\nimport { web3 } from \"./web3\";\nconst Balance = (props) => {\n  const [balance, setBalance] = useState(0);\n\n  useEffect(async () => {\n    if (web3.wallet) {\n      web3.wallet.getbalance().then((balance) => {\n        setBalance(balance);\n      });\n    }\n  }, []);\n\n    return (\n      <div className=\"wallet\">\n        <div className=\"walletInfo\">\n          <div className=\"balance\">\n            <label>Balance: {balance} <span> (satoshis)</span></label>\n          </div>\n        </div>\n      </div>\n    );\n};\n\nexport default Balance;\n","import { web3 } from \"./web3\";\n\nconst Auth = (props) => {\n\n  const sensiletLogin = async (e) => {\n    try {\n      const res = await web3.wallet.requestAccount(\"tic-tac-toe\");\n      if (res) {\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error(\"requestAccount error\", error);\n    }\n  };\n\n  return (\n    <div className=\"auth\">\n      <div>\n        <button\n          className=\"pure-button button-large sensilet\"\n          onClick={sensiletLogin}\n        >\n          Sensilet\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n","import \"./App.css\";\nimport Game from \"./Game\";\nimport React, { useState, useEffect } from \"react\";\nimport TitleBar from \"./TitleBar\";\nimport { PubKey } from \"scryptlib\";\nimport { web3, SensiletWallet } from \"./web3\";\nimport Balance from \"./balance\";\nimport {GameData, PlayerPublicKey, Player, ContractUtxos, CurrentPlayer} from \"./storage\";\nimport Auth from \"./auth\";\n\n\nasync function fetchContract(alicePubKey, bobPubKey) {\n  let { contractClass: TictactoeContractClass } = await web3.loadContract(\n    \"/tic-tac-toe/tictactoe_release_desc.json\"\n  );\n\n  return new TictactoeContractClass(\n    new PubKey(alicePubKey),\n    new PubKey(bobPubKey),\n    true,\n    [0,0,0,0,0,0,0,0,0]\n  );\n}\n\nfunction App() {\n\n  const ref = React.createRef();\n\n  const [states, updateStates] = useState({\n    started: false,\n    isConnected: false,\n    instance: null\n  });\n\n  // init web3 wallet\n  useEffect(async () => {\n\n    const timer = setTimeout(async ()=> {\n      web3.setWallet(new SensiletWallet())\n      const isConnected = await web3.wallet.isConnected();\n      console.log(\"sensilet isConnected: \", isConnected);\n  \n      const instance = await fetchContract(PlayerPublicKey.get(Player.Alice),\n        PlayerPublicKey.get(Player.Bob))\n      \n      updateStates({\n        started: Object.keys(GameData.get()).length > 0,\n        isConnected: isConnected,\n        instance: instance\n      })\n  \n    }, 100)\n\n\n    return () => {\n      clearTimeout(timer)\n    }\n\n  }, []);\n\n  const startGame = async (amount) => {\n\n    if (web3.wallet && states.instance) {\n\n      web3.deploy(states.instance, amount).then(rawTx => {\n\n        let gameStates = {\n          amount: amount,\n          name: \"tic-tac-toe\",\n          date: new Date(),\n          history: [\n            {\n              squares: Array(9).fill(null),\n            },\n          ],\n          currentStepNumber: 0,\n          isAliceTurn: true,\n        };\n  \n        ContractUtxos.add(rawTx);\n        GameData.set(gameStates);\n        CurrentPlayer.set(Player.Alice);\n\n        updateStates(Object.assign({}, states, {\n          started: true\n        }))\n      })\n    }\n  };\n\n  const cancelGame = async () => {\n    GameData.clear();\n    ContractUtxos.clear();\n    CurrentPlayer.set(Player.Alice);\n\n    if(states.instance) {\n      // restore states\n      states.instance.isAliceTurn = true;\n      states.instance.board = [0,0,0,0,0,0,0,0,0];\n    }\n\n    ref.current.clean();\n\n    updateStates({\n      started: false,\n      isConnected: states.isConnected,\n      instance: states.instance\n    })\n\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Play Tic-Tac-Toe on Bitcoin</h2>\n        <TitleBar\n          onStart={startGame}\n          onCancel={cancelGame}\n          started={states.started}\n        />\n        <Game ref={ref} contractInstance={states.instance} />\n\n        {states.isConnected ? <Balance></Balance> : <Auth></Auth>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {initPlayer} from './storage';\nimport reportWebVitals from './reportWebVitals';\n\n\ninitPlayer();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from 'axios';\nexport default class Whatsonchain {\n    static API_PREFIX = `https://api.whatsonchain.com/v1/bsv/main`;\n\n    static async sendRawTransaction(rawTx: string): Promise<string> {\n        // 1 second per KB\n        const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n        const time = Math.max(10000, 1000 * size);\n\n        try {\n            const res = await axios.post(`${Whatsonchain.API_PREFIX}/tx/raw`, {\n                txhex: rawTx\n            }, {\n                timeout: time\n            });\n            return res.data;\n        } catch (error) {\n            throw new Error('sendRawTransaction error: ')\n        }\n\n    }\n\n    static async listUnspent(address: string): Promise<any> {\n        return axios.get(`${Whatsonchain.API_PREFIX}/address/${address}/unspent`, {\n            timeout: 10000\n        });\n    }\n}\n"],"sourceRoot":""}