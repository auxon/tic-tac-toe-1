{"version":3,"sources":["web3/sensiletwallet.ts","web3/whatsonchain.ts","web3/web3.ts","Square.js","Board.js","storage.js","Game.js","TitleBar.js","balance.js","auth.js","App.js","reportWebVitals.js","index.js","web3/wallet.ts"],"names":["SensiletWallet","network","NetWork","Testnet","sensilet","window","console","log","DEBUG_TAG","warn","name","permissions","this","requestAccount","alert","open","a","isConnect","isConnected","error","getBsvBalance","res","balance","Promise","resolve","total","rawtx","script","satoshis","inputIndex","sigHashType","tx","bsv","Transaction","signTx","list","txHex","address","getAddressFromP2PKH","scriptHex","sigtype","unlockScript","Script","add","Buffer","from","sigList","sig","publicKey","inputs","setScript","toString","signature","publickey","rawTx","Whatsonchain","sendRawTransaction","minAmount","options","getAddress","listUnspent","then","data","filter","utxo","value","map","txId","tx_hash","outputIndex","tx_pos","buildPublicKeyHashOut","toHex","getPublicKey","Address","fromString","Mainnet","wallet","pubKeyHash","fromHex","toASM","split","API_PREFIX","TX_URL_PREFIX","size","Math","max","length","time","axios","post","txhex","timeout","Error","get","txid","web3","url","contractClass","buildContractClass","types","buildTypeClasses","getRawChangeAddress","contract","amountInContract","changeAddress","purpose","utxos","addOutput","Output","lockingScript","change","signRawTransaction","SignType","ALL","sendRawTx","contractUtxo","cbBuildTx","addInput","Input","prevTxId","output","Square","props","getTxUri","icon","className","n","winnerClass","onClick","href","target","title","label","Board","row","col","board","cellCounter","i","columns","j","push","renderSquare","winnerSquares","squares","createBoard","React","Component","Player","PlayerPrivkey","player","localStorage","getItem","key","setItem","PlayerPublicKey","privateKey","PrivateKey","fromWIF","PublicKey","fromPrivateKey","PlayerAddress","toAddress","CurrentPlayer","GameData","gameStr","JSON","parse","set","game","stringify","update","now","Object","assign","clear","ContractUtxos","id","outputs","utxosStr","getlast","getdeploy","toContractState","state","history","slice","currentStepNumber","isAliceTurn","square","calculateWinner","lines","b","c","winner","winnerRow","getLocation","move","0","1","2","3","4","5","6","7","8","initialState","Array","fill","Game","keys","attachState","setState","states","contractInstance","canMove","backupState","gameState","concat","currentLocation","stepNumber","call","setOutput","getEstimateFee","newStates","newLockingScript","getNewStateScript","amount","setInputScript","preimage","getPreimage","toScript","seal","catch","e","status","end","bet","current","deploy","last","src","winnerName","nexter","handleClick","TitleBar","amountRef","useRef","onStart","parseInt","isNaN","getbalance","started","onCancel","ref","type","min","defaultValue","placeholder","Balance","useState","setBalance","setAddress","setNetwork","useEffect","getNetwork","Auth","sensiletLogin","location","reload","fetchContract","alicePubKey","bobPubKey","loadContract","TictactoeContractClass","PubKey","App","createRef","instance","updateStates","timer","setTimeout","setWallet","clearTimeout","startGame","gameStates","date","Date","message","cancelGame","clean","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","aliceKey","fromRandom","toWIF","bobKey","initPlayer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45a209be.chunk.js","sourcesContent":["import { UTXO, wallet, SignType } from './wallet';\nimport { bsv } from 'scryptlib';\nimport { NetWork, Whatsonchain} from './whatsonchain';\n\n\nexport class SensiletWallet extends wallet {\n  static DEBUG_TAG = 'Sensilet';\n  sensilet: any;\n\n  constructor(network: NetWork = NetWork.Testnet) {\n    super(network);\n    if (typeof (window as any).sensilet !== 'undefined') {\n      console.log(SensiletWallet.DEBUG_TAG, 'Sensilet is installed!');\n      this.sensilet = (window as any).sensilet \n    } else {\n      console.warn(SensiletWallet.DEBUG_TAG, \"sensilet is not installed\");\n    }\n  }\n\n  requestAccount(name: string, permissions: string[]): Promise<any> {\n\n    if(!this.sensilet) {\n      if(typeof (window as any).sensilet === 'undefined') {\n        alert(\"sensilet is not installed\");\n         window.open(\"https://sensilet.com/\", '_blank');\n      } else  {\n        console.log(SensiletWallet.DEBUG_TAG, 'Sensilet is installed!');\n        this.sensilet = (window as any).sensilet \n        return this.sensilet.requestAccount()\n      }\n    }\n\n    return this.sensilet.requestAccount()\n  }\n\n  async isConnected(): Promise<boolean> {\n    try {\n      console.log(SensiletWallet.DEBUG_TAG, 'isConnect')\n      if (typeof this.sensilet !== 'undefined') {\n        let isConnected = await this.sensilet.isConnect();\n        console.log(SensiletWallet.DEBUG_TAG, 'connect state', isConnected);\n        return isConnected;\n      } \n\n    } catch (error) {\n      console.error('isConnected error', error)\n    }\n    return false;\n  }\n\n\n  async getbalance(): Promise<number> {\n    try {\n      let res = await this.sensilet.getBsvBalance();\n      console.log(SensiletWallet.DEBUG_TAG, 'getbalance', res.balance)\n      return Promise.resolve(res.balance.total);\n    } catch (error) {\n      console.error('getbalance error', error);\n    }\n\n    return Promise.resolve(0)\n  }\n\n  async signRawTransaction(rawtx: string,\n    script: string, \n    satoshis: number, \n    inputIndex: number, \n    sigHashType: SignType\n  ): Promise<string> {\n\n    const tx = new bsv.Transaction(rawtx);\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: getAddressFromP2PKH(script, this.network),\n          scriptHex: script,\n          inputIndex: inputIndex,\n          satoshis: satoshis,\n          sigtype: sigHashType\n        }\n      ]\n    });\n\n    const unlockScript = new bsv.Script()\n    .add(Buffer.from(res.sigList[0].sig,'hex'))\n    .add(Buffer.from(res.sigList[0].publicKey,'hex'));\n\n    tx.inputs[inputIndex].setScript(unlockScript);\n\n    return tx.toString();\n  }\n\n\n\n  async getSignature(rawtx: string,\n    script: string, \n    satoshis: number,\n    inputIndex: number, \n    sigHashType: SignType,\n    address: string\n  ): Promise<{\n    signature: string,\n    publickey: string\n  }> {\n\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: address,\n          inputIndex:inputIndex,\n          satoshis:satoshis,\n          scriptHex: script,\n          sigtype: sigHashType\n        }\n      ]\n    });\n\n    return {\n      signature: res.sigList[0].sig,\n      publickey:  res.sigList[0].publickey,\n    }\n\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n    return Whatsonchain.sendRawTransaction(rawTx);\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n\n    let address = await this.sensilet.getAddress();\n    console.log(SensiletWallet.DEBUG_TAG, 'listUnspent', address)\n    return Whatsonchain.listUnspent(address).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txId: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(address).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  async getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getAddress();\n  }\n\n\n  async getPublicKey(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getPublicKey();\n  }\n\n\n  async getNetwork(options?: { purpose?: string; }): Promise<NetWork> {\n    const address = await this.sensilet.getAddress();\n    const a = new bsv.Address.fromString(address);\n    return a.network.name === 'testnet' ? NetWork.Testnet : NetWork.Mainnet;\n  }\n}\n\nfunction getAddressFromP2PKH(script: string, network: NetWork) : string {\n  const asm = bsv.Script.fromHex(script).toASM();\n  //OP_DUP OP_HASH160 ${address} OP_EQUALVERIFY OP_CHECKSIG\n  const pubKeyHash = asm.split(' ')[2]; //get address from script\n  const address = new bsv.Address.fromHex(`${network === NetWork.Testnet ?  '6f' : '00'}${pubKeyHash}`).toString();\n  return address\n}","import axios from 'axios';\n\nexport enum NetWork {\n    Testnet = 'testnet',\n    Regtest = 'regtest',\n    Mainnet = 'mainnet',\n    STN = 'STN'\n}\nexport class Whatsonchain {\n    static API_PREFIX = ``;\n    static TX_URL_PREFIX = ``;\n    static setNetwork(network: NetWork) {\n\n        Whatsonchain.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network === NetWork.Testnet ? 'test' : 'main'}`;\n        Whatsonchain.TX_URL_PREFIX = `${network === NetWork.Testnet ? 'https://test.whatsonchain.com/tx' : 'https://whatsonchain.com/tx'}`;\n    }\n    static async sendRawTransaction(rawTx: string): Promise<string> {\n        // 1 second per KB\n        const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n        const time = Math.max(10000, 1000 * size);\n\n        try {\n            const res = await axios.post(`${Whatsonchain.API_PREFIX}/tx/raw`, {\n                txhex: rawTx\n            }, {\n                timeout: time\n            });\n            return res.data;\n        } catch (error) {\n            throw new Error('sendRawTransaction error: ')\n        }\n\n    }\n\n    static async listUnspent(address: string): Promise<any> {\n        return axios.get(`${Whatsonchain.API_PREFIX}/address/${address}/unspent`, {\n            timeout: 10000\n        });\n    }\n\n    static getTxUri(txid: string): string {\n        return `${Whatsonchain.TX_URL_PREFIX}/${txid}`;\n    }\n}\n","import { buildContractClass, buildTypeClasses, ScryptType, bsv } from 'scryptlib';\nimport { UTXO, wallet, SignType } from './wallet';\nimport axios from 'axios';\nimport { AbstractContract } from 'scryptlib/dist/contract';\nconst WEB3_VERSION = '0.0.2';\n\n\nexport class web3 {\n\n  static wallet: wallet;\n\n  static setWallet(wallet: wallet) {\n    web3.wallet = wallet;\n  }\n\n\n  static version() {\n    return WEB3_VERSION;\n  }\n\n\n  static loadContract(url: string): Promise<{\n    contractClass: typeof AbstractContract,\n    types: Record<string, typeof ScryptType>\n  }> {\n    return axios.get(url, {\n      timeout: 10000\n    }).then(res => {\n      const contractClass = buildContractClass(res.data);\n      return {\n        contractClass: contractClass,\n        types: buildTypeClasses(contractClass)\n      };\n    });\n  }\n\n\n  static async getChangeAddress(): Promise<string> {\n    return web3.wallet.getRawChangeAddress();\n  }\n\n\n  static async sendRawTx(rawTx: string): Promise<string> {\n    return web3.wallet.sendRawTransaction(rawTx);\n  }\n\n\n  static async deploy(contract: AbstractContract, amountInContract: number): Promise<string> {\n    const wallet = web3.wallet\n\n    const changeAddress = await web3.wallet.getRawChangeAddress();\n\n    return wallet.listUnspent(amountInContract, {\n      purpose: 'tic-tac-toe'\n    }).then((utxos: UTXO[]) => {\n      if(utxos.length === 0) {\n        throw new Error('no utxo available')\n      }\n      const tx = new bsv.Transaction();\n      tx.from([utxos[0]])\n        .addOutput(new bsv.Transaction.Output({\n          script: contract.lockingScript,\n          satoshis: amountInContract,\n        }))\n        .change(changeAddress);\n\n      return wallet.signRawTransaction(tx.toString(), utxos[0].script, utxos[0].satoshis, 0, SignType.ALL);\n    }).then(async (rawTx: string) => {\n      await web3.sendRawTx(rawTx);\n      return rawTx;\n    })\n  }\n\n  static async call(contractUtxo: UTXO,\n    cbBuildTx: (tx: bsv.Transaction) => void,\n  ): Promise<string> {\n    const wallet = web3.wallet\n    const tx = new bsv.Transaction();\n    tx.addInput(new bsv.Transaction.Input({\n      prevTxId: contractUtxo.txId,\n      outputIndex: contractUtxo.outputIndex,\n      script: new bsv.Script(), // placeholder\n      output: new bsv.Transaction.Output({\n        script: contractUtxo.script,\n        satoshis: contractUtxo.satoshis,\n      })\n    }))\n\n    cbBuildTx(tx);\n\n    const rawTx = tx.toString();\n    await web3.sendRawTx(rawTx);\n    return rawTx;\n  }\n}","import { Whatsonchain } from \"./web3\";\n\nconst Square = props => {\n\n\n\n  let tx = props.value ? Whatsonchain.getTxUri(props.value.tx) : \"\";\n  let icon = props.value ? <div className='squareicon'>{props.value.n}</div> : \"\";\n  return (\n    <div className=\"squarewapper\">\n      <button className={`${props.winnerClass} square`} onClick={props.onClick}>\n        {props.value ? <a href={tx} target=\"_blank\" title=\"Click to see the transaction\">{props.value.label}</a> : props.value}\n      </button>\n      {icon}\n    </div>\n\n  )\n\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  createBoard(row, col) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      for (let j = 0; j < col; j += 1) {\n        columns.push(this.renderSquare(cellCounter++));\n      }\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n\n    const winnerClass =\n      this.props.winnerSquares &&\n        (this.props.winnerSquares[0] === i ||\n          this.props.winnerSquares[1] === i ||\n          this.props.winnerSquares[2] === i)\n        ? 'square--green'\n        : '';\n\n    return (\n      <Square\n        winnerClass={winnerClass}\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(3, 3)}</div>;\n  }\n}\n\nexport default Board;\n","import { toHex, bsv } from \"scryptlib\";\nimport { NetWork } from \"./web3\";\n\n\nexport const Player = {\n  Alice: 'alice',\n  Bob: 'bob'\n};\n\n// store alice and bob's Privkey\nexport const PlayerPrivkey = {\n  get: (player) => {\n    return localStorage.getItem(player);\n  },\n  set: (player, key) => {\n    localStorage.setItem(player, key);\n  },\n};\n\n// store alice and bob's PublicKey, readonly\nexport const PlayerPublicKey = {\n  get: (player) => {\n    const key = PlayerPrivkey.get(player);\n    const privateKey = new bsv.PrivateKey.fromWIF(key);\n    const publicKey = bsv.PublicKey.fromPrivateKey(privateKey);\n    return toHex(publicKey);\n  }\n};\n\n// store alice and bob's PublicKey Address, readonly\nexport const PlayerAddress = {\n  get: (player) => {\n    const key = PlayerPrivkey.get(player);\n    const privateKey = new bsv.PrivateKey.fromWIF(key);\n    return privateKey.toAddress().toString();\n  }\n};\n\n// store current player\nexport const CurrentPlayer = {\n  get: () => {\n    return localStorage[`player`] || Player.Alice;\n  },\n  set: (player) => {\n    localStorage.setItem(`player`, player);\n  },\n};\n\n// Randomly generated alice and bob privateKey\nexport const initPlayer = () => {\n\n  const alice = PlayerPrivkey.get(Player.Alice);\n\n  if(!alice) {\n    const aliceKey = new bsv.PrivateKey.fromRandom();\n    PlayerPrivkey.set(Player.Alice, aliceKey.toWIF())\n  }\n\n  const bob = PlayerPrivkey.get(Player.Bob);\n\n  if(!bob) {\n    const bobKey = new bsv.PrivateKey.fromRandom();\n    PlayerPrivkey.set(Player.Bob, bobKey.toWIF())\n  }\n}\n\n// store game data\nexport const GameData = {\n  get: () => {\n    const gameStr = localStorage[`game`];\n    return gameStr ? JSON.parse(gameStr) : {};\n  },\n  set: (game) => {\n    localStorage.setItem(`game`, JSON.stringify(game));\n  },\n  update: (game) => {\n    const now = GameData.get();\n    localStorage.setItem(`game`, JSON.stringify(Object.assign(now, game)));\n  },\n  clear: () => {\n    localStorage.setItem(`game`, JSON.stringify({}));\n  },\n};\n\n\n// store all utxos related to the contract\nexport const ContractUtxos = {\n  add: (rawTx, outputIndex = 0) => {\n    const tx = new bsv.Transaction(rawTx);\n    const utxos = ContractUtxos.get();\n    const utxo = {\n      utxo: {\n        txId: tx.id,\n        outputIndex: outputIndex,\n        satoshis: tx.outputs[outputIndex].satoshis,\n        script: tx.outputs[outputIndex].script.toHex()\n      },\n      rawTx: rawTx\n    };\n    utxos.push(utxo)\n    ContractUtxos.set(utxos)\n\n    return utxo;\n  },\n  get: () => {\n    const utxosStr = localStorage[`utxos`];\n    return utxosStr ? JSON.parse(utxosStr) : [];\n  },\n  set: (utxos) => {\n    localStorage.setItem(`utxos`, JSON.stringify(utxos));\n  },\n  clear: () => {\n    localStorage.setItem(`utxos`, JSON.stringify([]));\n  },\n  getlast: () => {\n    const utxos = ContractUtxos.get();\n    return utxos[utxos.length - 1];\n  },\n\n  getdeploy: () => {\n    const utxos = ContractUtxos.get();\n    return utxos[0];\n  },\n};\n\n\nexport const CurrentNetwork = {\n  get: () => {\n    return localStorage[`network`] === 'main' ?  NetWork.Mainnet : NetWork.Testnet;\n  },\n  switch: () => {\n    const network = CurrentNetwork.get();\n    localStorage.setItem(`network`, network == NetWork.Mainnet ? 'test' : 'main');\n  },\n};\n","import React from 'react';\nimport { bsv,getPreimage,signTx } from 'scryptlib/dist';\nimport Board from './Board';\nimport { GameData, PlayerAddress, PlayerPrivkey, Player, CurrentPlayer, ContractUtxos } from './storage';\nimport { web3, Whatsonchain } from './web3';\n\n\n\n// Convert react state to contract state\nconst toContractState = (state) => {\n  const history = state.history.slice(0, state.currentStepNumber + 1);\n  const current = history[history.length - 1];\n  const squares = current.squares.slice();\n  // n = 0 is first call\n  if (state.currentStepNumber > 0) {\n    return {\n      isAliceTurn: state.isAliceTurn,\n      board: squares.map(square => {\n        if (square && square.label === 'X') {\n          return 1;\n        } else if (square && square.label === 'O') {\n          return 2\n        } else {\n          return 0;\n        }\n      })\n    }\n  }\n}\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[b] && squares[c] && squares[a].label === squares[b].label && squares[a].label === squares[c].label) {\n      return { winner: squares[a], winnerRow: lines[i] };\n    }\n  }\n\n  return { winner: null, winnerRow: null };\n};\n\nconst getLocation = (move) => {\n  const locationMap = {\n    0: 'row: 1, col: 1',\n    1: 'row: 1, col: 2',\n    2: 'row: 1, col: 3',\n    3: 'row: 2, col: 1',\n    4: 'row: 2, col: 2',\n    5: 'row: 2, col: 3',\n    6: 'row: 3, col: 1',\n    7: 'row: 3, col: 2',\n    8: 'row: 3, col: 3',\n  };\n\n  return locationMap[move];\n};\n\nconst initialState = {\n  history: [\n    {\n      squares: Array(9).fill(null),\n    },\n  ],\n  currentStepNumber: 0,\n  isAliceTurn: true,\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    const game = GameData.get();\n    if (Object.keys(game).length !== 0) {\n      this.state = game;\n    } else {\n      this.state = initialState;\n    }\n\n    this.attachState();\n  \n  }\n\n  clean(){\n    this.setState(initialState);\n  }\n\n  // update contract state\n  attachState() {\n    const states = toContractState(this.state);\n    if (states && this.props.contractInstance) {\n      this.props.contractInstance.isAliceTurn = states.isAliceTurn;\n      this.props.contractInstance.board = states.board;\n    }\n  }\n\n\n  canMove(isAliceTurn, i, squares) {\n    const game = GameData.get();\n    if (!game || Object.keys(game).length === 0) {\n      alert(`Please start game first.`)\n      return false;\n    }\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return false;\n    }\n\n    let player = CurrentPlayer.get();\n\n    if (player === Player.Alice && isAliceTurn) {\n      return true;\n    } else if (player === Player.Bob && !this.state.isAliceTurn) {\n      return true;\n    } else {\n      alert(`now is ${this.state.isAliceTurn ? 'Alice' : 'Bob'} turn `)\n      return false;\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.currentStepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n\n    if (!this.canMove(this.state.isAliceTurn, i, squares)) {\n      console.error('can not move now!')\n      return;\n    }\n\n    const backupState = Object.assign({}, this.state);\n\n    squares[i] = { label: this.state.isAliceTurn ? 'X' : 'O' };\n    const gameState = {\n      history: history.concat([\n        {\n          squares,\n          currentLocation: getLocation(i),\n          stepNumber: history.length,\n        },\n      ]),\n      isAliceTurn: !this.state.isAliceTurn,\n      currentStepNumber: history.length,\n    }\n\n\n    // update states\n    this.setState(gameState);\n\n    const contractUtxo = ContractUtxos.getlast().utxo;\n\n    let winner = calculateWinner(squares).winner;\n\n    web3.call(contractUtxo, (tx) => {\n\n      if (winner) { // Current Player won\n        let address = PlayerAddress.get(CurrentPlayer.get());\n\n        tx.setOutput(0, (tx) => {\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(address),\n            satoshis: contractUtxo.satoshis - tx.getEstimateFee(),\n          })\n        })\n\n      } else if (history.length >= 9) { //board is full\n\n        tx.setOutput(0, (tx) => {\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(PlayerAddress.get(Player.Alice)),\n            satoshis: (contractUtxo.satoshis - tx.getEstimateFee()) /2,\n          })\n        })\n        .setOutput(1, (tx) => {\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(PlayerAddress.get(Player.Bob)),\n            satoshis: (contractUtxo.satoshis - tx.getEstimateFee()) /2,\n          })\n        })\n\n      } else { //continue move\n\n        const newStates = toContractState(gameState);\n        const newLockingScript = this.props.contractInstance.getNewStateScript(newStates);\n        tx.setOutput(0, (tx) => {\n          const amount = contractUtxo.satoshis - tx.getEstimateFee();\n\n          return new bsv.Transaction.Output({\n            script: newLockingScript,\n            satoshis: amount,\n          })\n        })\n      }\n\n      tx.setInputScript(0, (tx, output) => {\n          const preimage = getPreimage(tx, output.script, output.satoshis)\n          const privateKey = new bsv.PrivateKey.fromWIF(PlayerPrivkey.get(CurrentPlayer.get()));\n          const sig = signTx(tx, privateKey, output.script, output.satoshis)\n\n          const amount = contractUtxo.satoshis - tx.getEstimateFee();\n\n          if(amount < 1) {\n            alert('Not enough funds.');\n            throw new Error('Not enough funds.')\n          }\n\n          // we can verify locally before we broadcast the tx, if fail, \n          // it will print the launch.json in the brower webview developer tool, just copy/paste,\n          // and try launch the sCrypt debugger\n          // const result = this.props.contractInstance.move(i, sig, amount, preimage).verify({\n          //   inputSatoshis: output.satoshis, tx\n          // })\n\n\n          return this.props.contractInstance.move(i, sig, amount, preimage).toScript();\n        })\n        .seal()\n\n\n    }).then(rawTx => {\n\n      const utxo = ContractUtxos.add(rawTx);\n\n      squares[i].tx = utxo.utxo.txId;\n      squares[i].n = history.length;\n\n      if(!winner) {\n        CurrentPlayer.set(this.state.isAliceTurn ? Player.Alice : Player.Bob);\n      }\n\n\n      // update states\n      const gameState = Object.assign({}, this.state, {\n        history: history.concat([\n          {\n            squares,\n            currentLocation: getLocation(i),\n            stepNumber: history.length,\n          },\n        ])\n      })\n      this.setState(gameState)\n      GameData.update(gameState)\n      this.attachState();\n    })\n    .catch(e => {\n      //restore prev states\n      this.setState(backupState)\n\n      console.error('call contract fail', e)\n    })\n  \n  }\n\n\n\n  render() {\n    const { history } = this.state;\n    const current = history[this.state.currentStepNumber];\n    const { winner, winnerRow } = calculateWinner(current.squares);\n\n    const deploy = ContractUtxos.getdeploy();\n\n    const last = ContractUtxos.getlast();\n\n\n    let status;\n    let end;\n\n    let icon;\n\n\n    if (CurrentPlayer.get() === Player.Bob) {\n      icon = <div className=\"bob\">Bob<img src=\"/tic-tac-toe/bob.png\"></img></div>\n    } else {\n      icon = <div className=\"alice\">Alice<img src=\"/tic-tac-toe/alice.jpg\"></img></div>\n    }\n\n    let bet;\n    if (deploy) {\n      \n      bet = <div className=\"bet\"><a href={Whatsonchain.getTxUri(deploy.utxo.txId)} target=\"_blank\">Deploy transaction</a> </div>\n    }\n\n    if (winner) {\n      let winnerName = winner.label === 'X' ? 'Alice' : 'Bob';\n      status = `Winner is ${winnerName}`;\n      if (last) {\n        end = <div className=\"end\"><a href={Whatsonchain.getTxUri(deploy.utxo.txId)} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else if (history.length === 10) {\n      status = 'Draw. No one won.';\n      if (last) {\n        end = <div className=\"end\"><a href={Whatsonchain.getTxUri(deploy.utxo.txId)} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else {\n\n      let nexter = this.state.isAliceTurn ? 'Alice' : 'Bob';\n\n      status = `Next player: ${nexter}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n\n          <div className=\"game-title\">\n            {icon}\n            <div className=\"game-status\"> {status} </div>\n          </div>\n\n          <Board\n            squares={current.squares}\n            winnerSquares={winnerRow}\n            onClick={i => this.handleClick(i)}\n          />\n\n          <div className=\"game-bottom\">\n            {bet}\n            {end}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","\nimport React, { useState, useRef, useEffect } from 'react';\n\nimport { web3 } from './web3';\n\n\nfunction TitleBar(props) {\n\n    const amountRef = useRef(null);\n\n    const onStart = async (e) => {\n\n        let amount = parseInt(amountRef.current.value);\n\n        if (amount < 50000) {\n            alert(\"invalid amount, at least 50000 satoshis\")\n            return;\n        }\n\n        if (!isNaN(amount)) {\n\n            if(web3.wallet) {\n                let balance = await web3.wallet.getbalance();\n        \n                if (amount > balance) {\n                    alert(\"Not enough funds. Please fund your wallet address first\");\n                    return;\n                }\n            }\n\n            props.onStart(amount);\n        } else {\n            console.error(`${amountRef.current.value} is not number`)\n        }\n    }\n\n    const onCancel = (e) => {\n        props.onCancel();\n    }\n\n\n    if (props.started) {\n        return (\n            <div>\n                The game is in progress ...\n                <button className=\"pure-button cancel\" onClick={onCancel}>Restart</button>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <label>Bet amount:\n                    <input ref={amountRef} type=\"number\" name=\"amount\" min=\"1\" defaultValue={50000} placeholder=\"in satoshis\" />\n                </label>\n                <button className=\"start\" onClick={onStart}>Start</button>\n            </div>\n        );\n    }\n}\n\nexport default TitleBar;\n","import { useState, useEffect } from \"react\";\nimport { NetWork, web3 } from \"./web3\";\nconst Balance = (props) => {\n  const [balance, setBalance] = useState(0);\n  const [address, setAddress] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n  useEffect(async () => {\n    if (web3.wallet) {\n      web3.wallet.getbalance().then((balance) => {\n        setBalance(balance);\n      });\n\n      web3.wallet.getRawChangeAddress().then((address) => {\n        setAddress(address);\n      });\n\n      web3.wallet.getNetwork().then((network) => {\n        if(network === NetWork.Testnet) {\n          setNetwork('Testnet')\n        } else {\n          setNetwork('Mainnet')\n        }\n      });\n    }\n  }, []);\n\n    return (\n      <div className=\"wallet\">\n        <div className=\"walletInfo\">\n          <div className=\"balance\">\n            <label>Balance: {balance} <span> (satoshis)</span></label>\n            <br></br>\n            <label>NetWork: {network} </label>\n            <br></br>\n            <label>Address: {address} </label>\n          </div>\n        </div>\n      </div>\n    );\n};\n\nexport default Balance;","import { web3 } from \"./web3\";\n\nconst Auth = (props) => {\n\n  const sensiletLogin = async (e) => {\n    try {\n      const res = await web3.wallet.requestAccount(\"tic-tac-toe\");\n      if (res) {\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error(\"requestAccount error\", error);\n    }\n  };\n\n  return (\n    <div className=\"auth\">\n      <div>\n        <button\n          className=\"pure-button button-large sensilet\"\n          onClick={sensiletLogin}\n        >\n          Sensilet\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n","import \"./App.css\";\nimport Game from \"./Game\";\nimport React, { useState, useEffect } from \"react\";\nimport TitleBar from \"./TitleBar\";\nimport { PubKey } from \"scryptlib\";\nimport Balance from \"./balance\";\nimport {GameData, PlayerPublicKey, Player, ContractUtxos, CurrentPlayer} from \"./storage\";\nimport { SensiletWallet, web3 } from \"./web3\";\nimport Auth from \"./auth\";\n\nasync function fetchContract(alicePubKey, bobPubKey) {\n  let { contractClass: TictactoeContractClass } = await web3.loadContract(\n    \"/tic-tac-toe/tictactoe_release_desc.json\"\n  );\n\n  return new TictactoeContractClass(\n    new PubKey(alicePubKey),\n    new PubKey(bobPubKey),\n    true,\n    [0,0,0,0,0,0,0,0,0]\n  );\n}\n\n\nfunction App() {\n\n  const ref = React.createRef();\n\n  const [states, updateStates] = useState({\n    started: false,\n    isConnected: false,\n    instance: null\n  });\n\n  // init web3 wallet\n  useEffect(async () => {\n\n    const timer = setTimeout(async ()=> {\n\n      const instance = await fetchContract(PlayerPublicKey.get(Player.Alice),\n        PlayerPublicKey.get(Player.Bob))\n\n      const wallet =  new SensiletWallet();\n      const n = await wallet.getNetwork();\n      web3.setWallet(new SensiletWallet(n));\n\n      const isConnected = await web3.wallet.isConnected();\n\n      updateStates({\n        started: Object.keys(GameData.get()).length > 0,\n        isConnected: isConnected,\n        instance: instance\n      })\n\n    }, 100)\n\n\n    return () => {\n      clearTimeout(timer)\n    }\n\n  }, []);\n\n  const startGame = async (amount) => {\n\n    if(web3.wallet && states.instance) {\n\n      web3.deploy(states.instance, amount).then(rawTx => {\n\n\n        let gameStates = {\n          amount: amount,\n          name: \"tic-tac-toe\",\n          date: new Date(),\n          history: [\n            {\n              squares: Array(9).fill(null),\n            },\n          ],\n          currentStepNumber: 0,\n          isAliceTurn: true,\n        };\n\n        ContractUtxos.add(rawTx);\n        GameData.set(gameStates);\n        CurrentPlayer.set(Player.Alice);\n\n        updateStates(Object.assign({}, states, {\n          started: true\n        }))\n\n      })\n      .catch(e => {\n        alert(e.message)\n        console.error(e)\n      })\n    }\n\n    \n    \n  };\n\n  const cancelGame = async () => {\n    GameData.clear();\n    ContractUtxos.clear();\n    CurrentPlayer.set(Player.Alice);\n\n    if(states.instance) {\n      // reset states\n      states.instance.isAliceTurn = true;\n      states.instance.board = [0,0,0,0,0,0,0,0,0];\n    }\n\n    ref.current.clean();\n\n    updateStates({\n      started: false,\n      isConnected: states.isConnected,\n      instance: states.instance\n    })\n\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Play Tic-Tac-Toe on Bitcoin</h2>\n        <TitleBar\n          onStart={startGame}\n          onCancel={cancelGame}\n          started={states.started}\n        />\n        <Game ref={ref} contractInstance={states.instance}/>\n        {states.isConnected ? <Balance></Balance> : <Auth></Auth>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {initPlayer} from './storage';\nimport reportWebVitals from './reportWebVitals';\n\n\ninitPlayer();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Whatsonchain, NetWork } from \"./whatsonchain\";\n\nexport interface UTXO {\n  txId: number,\n  outputIndex: string;\n  satoshis: number;\n  script: string;\n  address?: string;\n  pubkey?: string\n}\n\n\nexport interface Account {\n  name: string,\n  paymail: string,\n  address: string,\n  permissions?: string[]\n}\n\n\n\n\nexport enum SignType {\n  ALL = 0x00000001 | 0x00000040,\n  SINGLE = 0x00000003 | 0x00000040,\n  NONE = 0x00000002 | 0x00000040,\n  ANYONECANPAY_ALL = 0x00000001 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_SINGLE = 0x00000003 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_NONE = 0x00000002 | 0x00000040 | 0x00000080\n}\n\n\nexport abstract class wallet {\n\n  network: NetWork;\n\n  constructor(network: NetWork) {\n    this.network = network;\n    Whatsonchain.setNetwork(this.network);\n  }\n\n  // Check if the wallet is ready. If not ready, use requestAccount to setup.\n  abstract isConnected(): Promise<boolean>;\n\n  //Dapp use this api to connect to the wallet.\n  abstract requestAccount(name: string, permissions: string[]): Promise<any>;\n\n  //get wallet balance\n  abstract getbalance(): Promise<number>;\n\n  //sign raw transaction, returns unlockscript of the p2pkh input if success\n  abstract signRawTransaction(rawtx: string, script: string, satoshis: number, inputIndex: number, sigHashType: SignType\n  ): Promise<string>;\n\n  //get signature for special input\n  abstract getSignature(rawtx: string, script: string, satoshis: number, inputIndex: number, sigHashType: SignType, address: string\n  ): Promise<{\n    signature: string,\n    publickey: string\n  }>;\n\n  //send raw transaction, returns transaction hash if success\n  abstract sendRawTransaction(rawTx: string): Promise<string>;\n\n  //returns array of unspent transaction outputs, which total amount is more than the minAmount argument.\n  abstract listUnspent(minAmount: number, options?: {\n    purpose?: string\n  }): Promise<UTXO[]>;\n\n  //returns a new Bitcoin address, for receiving change.\n  abstract getRawChangeAddress(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns a public key\n  abstract getPublicKey(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns current network\n  abstract getNetwork(options?: { purpose?: string; }): Promise<NetWork>;\n\n}"],"sourceRoot":""}